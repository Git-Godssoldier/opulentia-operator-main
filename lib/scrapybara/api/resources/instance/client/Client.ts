/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scrapybara from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";
import * as fs from "fs";
import { Blob } from "buffer";

export declare namespace Instance {
    export interface Options {
        environment?: core.Supplier<environments.ScrapybaraEnvironment | string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Instance {
    constructor(protected readonly _options: Instance.Options = {}) {}

    /**
     * @param {string} instanceId
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.screenshot("instance_id")
     */
    public async screenshot(
        instanceId: string,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.InstanceScreenshotResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/screenshot`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.InstanceScreenshotResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/screenshot.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.getStreamUrl("instance_id")
     */
    public async getStreamUrl(
        instanceId: string,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.InstanceGetStreamUrlResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/stream_url`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.InstanceGetStreamUrlResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling GET /instance/{instance_id}/stream_url.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Scrapybara.Request} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.computer("instance_id", {
     *         action: "move_mouse",
     *         coordinates: [1]
     *     })
     */
    public async computer(
        instanceId: string,
        request: Scrapybara.Request,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.ComputerResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/computer`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ComputerResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/computer.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Scrapybara.BashRequest} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.bash("instance_id")
     */
    public async bash(
        instanceId: string,
        request: Scrapybara.BashRequest = {},
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.BashResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/bash`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BashRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.BashResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/bash.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Scrapybara.EditRequest} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.edit("instance_id", {
     *         command: "view",
     *         path: "path"
     *     })
     */
    public async edit(
        instanceId: string,
        request: Scrapybara.EditRequest,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.EditResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/edit`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.EditRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.EditResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/edit.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Scrapybara.FileRequest} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.file("instance_id", {
     *         command: "command"
     *     })
     */
    public async file(
        instanceId: string,
        request: Scrapybara.FileRequest,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.FileResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/file`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.FileRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.FileResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/file.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Upload a file to the instance.
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {string} instanceId
     * @param {Scrapybara.BodyUploadV1InstanceInstanceIdUploadPost} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.upload(fs.createReadStream("/path/to/your/file"), "instance_id", {
     *         path: "path"
     *     })
     */
    public async upload(
        file: File | fs.ReadStream | Blob,
        instanceId: string,
        request: Scrapybara.BodyUploadV1InstanceInstanceIdUploadPost,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.UploadResponse> {
        const _request = await core.newFormData();
        await _request.appendFile("file", file);
        await _request.append("path", request.path);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/upload`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.UploadResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/upload.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.stop("instance_id")
     */
    public async stop(
        instanceId: string,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.StopInstanceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/stop`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.StopInstanceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/stop.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.pause("instance_id")
     */
    public async pause(
        instanceId: string,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.StopInstanceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/pause`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.StopInstanceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/pause.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Scrapybara.InstanceResumeRequest} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.resume("instance_id")
     */
    public async resume(
        instanceId: string,
        request: Scrapybara.InstanceResumeRequest = {},
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.GetInstanceResponse> {
        const { timeoutHours } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (timeoutHours != null) {
            _queryParams["timeout_hours"] = timeoutHours.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/resume`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetInstanceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/resume.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {Scrapybara.InstanceRescheduleTerminationRequest} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.rescheduleTermination("instance_id")
     */
    public async rescheduleTermination(
        instanceId: string,
        request: Scrapybara.InstanceRescheduleTerminationRequest = {},
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.StopInstanceResponse> {
        const { newTimeoutHours } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (newTimeoutHours != null) {
            _queryParams["new_timeout_hours"] = newTimeoutHours.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/reschedule_termination`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.StopInstanceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/reschedule_termination.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Expose a port on the instance with a public-facing URL.
     *
     * This endpoint creates a temporary public URL that routes traffic to the specified port on the instance.
     *
     * @param {string} instanceId
     * @param {Scrapybara.ExposePortRequest} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.exposePort("instance_id", {
     *         port: 1
     *     })
     */
    public async exposePort(
        instanceId: string,
        request: Scrapybara.ExposePortRequest,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.ExposePortResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/expose_port`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExposePortRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ExposePortResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/expose_port.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deploy a directory from the instance to Netlify.
     *
     * Args:
     *     directory_path: Path to the directory on the instance to deploy
     *
     * @param {string} instanceId
     * @param {Scrapybara.NetlifyDeployRequest} request
     * @param {Instance.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.instance.deployToNetlify("instance_id", {
     *         directoryPath: "directory_path"
     *     })
     */
    public async deployToNetlify(
        instanceId: string,
        request: Scrapybara.NetlifyDeployRequest,
        requestOptions?: Instance.RequestOptions,
    ): Promise<Scrapybara.NetlifyDeployResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}/deploy_to_netlify`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.NetlifyDeployRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.NetlifyDeployResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /instance/{instance_id}/deploy_to_netlify.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SCRAPYBARA_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
