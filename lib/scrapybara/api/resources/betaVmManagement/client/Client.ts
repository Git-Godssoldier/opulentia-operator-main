/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scrapybara from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace BetaVmManagement {
    export interface Options {
        environment?: core.Supplier<environments.ScrapybaraEnvironment | string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class BetaVmManagement {
    constructor(protected readonly _options: BetaVmManagement.Options = {}) {}

    /**
     * Take a snapshot of an instance
     *
     * @param {string} instanceId
     * @param {BetaVmManagement.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.betaVmManagement.takeSnapshot("instance_id")
     */
    public async takeSnapshot(
        instanceId: string,
        requestOptions?: BetaVmManagement.RequestOptions,
    ): Promise<Scrapybara.SnapshotResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `beta/instances/${encodeURIComponent(instanceId)}/snapshot`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SnapshotResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /beta/instances/{instance_id}/snapshot.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Warmup a snapshot
     *
     * @param {string} snapshotId
     * @param {BetaVmManagement.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.betaVmManagement.warmupSnapshot("snapshot_id")
     */
    public async warmupSnapshot(
        snapshotId: string,
        requestOptions?: BetaVmManagement.RequestOptions,
    ): Promise<Scrapybara.SuccessResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `beta/snapshots/${encodeURIComponent(snapshotId)}/warmup`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SuccessResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /beta/snapshots/{snapshot_id}/warmup.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete a snapshot
     *
     * @param {string} snapshotId
     * @param {BetaVmManagement.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.betaVmManagement.deleteSnapshot("snapshot_id")
     */
    public async deleteSnapshot(
        snapshotId: string,
        requestOptions?: BetaVmManagement.RequestOptions,
    ): Promise<Scrapybara.SuccessResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `beta/snapshots/${encodeURIComponent(snapshotId)}/delete`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SuccessResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling POST /beta/snapshots/{snapshot_id}/delete.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SCRAPYBARA_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
