/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import * as Scrapybara from "./api/index";
import * as serializers from "./serialization/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import { Instance } from "./api/resources/instance/client/Client";
import { Browser } from "./api/resources/browser/client/Client";
import { Code } from "./api/resources/code/client/Client";
import { Notebook } from "./api/resources/notebook/client/Client";
import { Env } from "./api/resources/env/client/Client";
import { BetaVmManagement } from "./api/resources/betaVmManagement/client/Client";
import { Tool, AssistantMessage, ToolMessage, Step, ActResponse, SingleActRequest, convertRequestToApi, convertResponseToSdk } from "./api/types";

export type RunnableTool<T> = Tool & {
    execute: (args: any) => Promise<T> | T;
};

export declare namespace ScrapybaraClient {
    export interface Options {
        environment?: core.Supplier<environments.ScrapybaraEnvironment | string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ScrapybaraClient {
    protected _instance: Instance | undefined;
    protected _browser: Browser | undefined;
    protected _code: Code | undefined;
    protected _notebook: Notebook | undefined;
    protected _env: Env | undefined;
    protected _betaVmManagement: BetaVmManagement | undefined;

    constructor(protected readonly _options: ScrapybaraClient.Options = {}) {}

    public async act<T>(
        request: SingleActRequest,
        options: {
            tools?: RunnableTool<T>[];
            onAssistantMessage?: (message: AssistantMessage) => Promise<void> | void;
            onToolMessage?: (message: ToolMessage) => Promise<void> | void;
            onStep?: (step: Step) => Promise<void> | void;
            imagesToKeep?: number;
        } = {}
    ): Promise<ActResponse<T>> {
        const { tools, onAssistantMessage, onToolMessage, onStep, imagesToKeep } = options;
        const messages = [...(request.messages ?? [])];

        while (true) {
            const apiRequest = convertRequestToApi({ ...request, messages, tools });
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                    "act"
                ),
                method: "POST",
                headers: {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "scrapybara",
                    "X-Fern-SDK-Version": "2.6.0-beta.5",
                    "User-Agent": "scrapybara/2.6.0-beta.5",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...(await this._getCustomAuthorizationHeaders()),
                },
                contentType: "application/json",
                requestType: "json",
                body: apiRequest,
            });

            if (!_response.ok) {
                if (_response.error.reason === "status-code") {
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }

                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.ScrapybaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.ScrapybaraTimeoutError("Timeout exceeded when calling POST /act.");
                    case "unknown":
                        throw new errors.ScrapybaraError({
                            message: _response.error.errorMessage,
                        });
                }
            }

            const sdkResponse = convertResponseToSdk(_response.body as Scrapybara.ApiSingleActResponse);
            const { message, finishReason, usage } = sdkResponse;

            messages.push(message);
            if (onAssistantMessage) {
                await onAssistantMessage(message);
            }

            const toolCalls = message.content.filter((part) => part.type === "tool-call");
            if (toolCalls.length === 0 || !tools) {
                const text = message.content.find((part) => part.type === "text")?.text;
                return { messages, steps: [], text, usage };
            }

            const toolResults: ToolMessage = {
                role: "tool",
                content: [],
            };

            for (const toolCall of toolCalls) {
                if (toolCall.type !== "tool-call") continue;

                const tool = tools.find((t) => t.name === toolCall.toolName);
                if (!tool) {
                    toolResults.content.push({
                        type: "tool-result",
                        toolCallId: toolCall.toolCallId,
                        toolName: toolCall.toolName,
                        result: `Tool not found: ${toolCall.toolName}`,
                        isError: true,
                    });
                    continue;
                }

                try {
                    const result = await tool.execute(toolCall.args);
                    toolResults.content.push({
                        type: "tool-result",
                        toolCallId: toolCall.toolCallId,
                        toolName: toolCall.toolName,
                        result,
                    });
                } catch (error: any) {
                    toolResults.content.push({
                        type: "tool-result",
                        toolCallId: toolCall.toolCallId,
                        toolName: toolCall.toolName,
                        result: error.message,
                        isError: true,
                    });
                }
            }

            messages.push(toolResults);
            if (onToolMessage) {
                await onToolMessage(toolResults);
            }
        }
    }

    public get instance(): Instance {
        return (this._instance ??= new Instance(this._options));
    }

    public get browser(): Browser {
        return (this._browser ??= new Browser(this._options));
    }

    public get code(): Code {
        return (this._code ??= new Code(this._options));
    }

    public get notebook(): Notebook {
        return (this._notebook ??= new Notebook(this._options));
    }

    public get env(): Env {
        return (this._env ??= new Env(this._options));
    }

    public get betaVmManagement(): BetaVmManagement {
        return (this._betaVmManagement ??= new BetaVmManagement(this._options));
    }

    /**
     * @param {Scrapybara.DeploymentConfig} request
     * @param {ScrapybaraClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.start()
     */
    public async start(
        request: Scrapybara.DeploymentConfig = {},
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.GetInstanceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                "start",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.DeploymentConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetInstanceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError("Timeout exceeded when calling POST /start.");
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} instanceId
     * @param {ScrapybaraClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.get("instance_id")
     */
    public async get(
        instanceId: string,
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.GetInstanceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                `instance/${encodeURIComponent(instanceId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetInstanceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError(
                    "Timeout exceeded when calling GET /instance/{instance_id}.",
                );
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {ScrapybaraClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getInstances()
     */
    public async getInstances(
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.GetInstanceResponse[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                "instances",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.getInstances.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScrapybaraError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError("Timeout exceeded when calling GET /instances.");
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {ScrapybaraClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getAuthStates()
     */
    public async getAuthStates(
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.AuthStateResponse[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                "auth_states",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.getAuthStates.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScrapybaraError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError("Timeout exceeded when calling GET /auth_states.");
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {Scrapybara.DeleteAuthStateRequest} request
     * @param {ScrapybaraClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scrapybara.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteAuthState({
     *         authStateId: "auth_state_id"
     *     })
     */
    public async deleteAuthState(
        request: Scrapybara.DeleteAuthStateRequest,
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.DeleteBrowserAuthResponse> {
        const { authStateId } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["auth_state_id"] = authStateId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ScrapybaraEnvironment.Production,
                "delete_auth_state",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "scrapybara",
                "X-Fern-SDK-Version": "2.6.0-beta.5",
                "User-Agent": "scrapybara/2.6.0-beta.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 600000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.DeleteBrowserAuthResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scrapybara.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ScrapybaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScrapybaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScrapybaraTimeoutError("Timeout exceeded when calling POST /delete_auth_state.");
            case "unknown":
                throw new errors.ScrapybaraError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SCRAPYBARA_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}

export class BaseInstance {
    public readonly id: string;
    public readonly launchTime: Date;
    public readonly status: string;
    protected readonly fern: ScrapybaraClient;

    constructor(id: string, launchTime: Date, status: string, fern: ScrapybaraClient) {
        this.id = id;
        this.launchTime = launchTime;
        this.status = status;
        this.fern = fern;
    }

    public async screenshot(
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.InstanceScreenshotResponse> {
        return await this.fern.instance.screenshot(this.id, requestOptions);
    }

    public async getStreamUrl(
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.InstanceGetStreamUrlResponse> {
        return await this.fern.instance.getStreamUrl(this.id, requestOptions);
    }

    public async computer(
        request: Scrapybara.Request,
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.ComputerResponse> {
        return await this.fern.instance.computer(this.id, request, requestOptions);
    }

    public async pause(requestOptions?: ScrapybaraClient.RequestOptions): Promise<Scrapybara.StopInstanceResponse> {
        return await this.fern.instance.pause(this.id, requestOptions);
    }

    public async resume(
        request: Scrapybara.InstanceResumeRequest = {},
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.GetInstanceResponse> {
        return await this.fern.instance.resume(this.id, request, requestOptions);
    }

    public async rescheduleTermination(
        request: Scrapybara.InstanceRescheduleTerminationRequest = {},
        requestOptions?: ScrapybaraClient.RequestOptions,
    ): Promise<Scrapybara.StopInstanceResponse> {
        return await this.fern.instance.rescheduleTermination(this.id, request, requestOptions);
    }

    public async upload(
        file: File | Blob | any,
        request: Scrapybara.BodyUploadV1InstanceInstanceIdUploadPost,
        requestOptions?: ScrapybaraClient.RequestOptions
    ): Promise<Scrapybara.UploadResponse> {
        return await this.fern.instance.upload(file, this.id, request, requestOptions);
    }

    public async exposePort(
        request: Scrapybara.ExposePortRequest,
        requestOptions?: ScrapybaraClient.RequestOptions
    ): Promise<Scrapybara.ExposePortResponse> {
        return await this.fern.instance.exposePort(this.id, request, requestOptions);
    }

    public async deployToNetlify(
        request: Scrapybara.NetlifyDeployRequest,
        requestOptions?: ScrapybaraClient.RequestOptions
    ): Promise<Scrapybara.NetlifyDeployResponse> {
        return await this.fern.instance.deployToNetlify(this.id, request, requestOptions);
    }
}
